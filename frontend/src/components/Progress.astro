---
import Feedback from "./Feedback/Feedback.astro";

type Props = {
  id: string;
  total: number;
  confetti: boolean;
};

const { id, total, confetti = true } = Astro.props;
---
<script is:inline src="https://rust-quest.ck.page/commerce.js" async defer></script>

<x-progress data-confetti={`${confetti}`}>
  <label for={id}>0 / {total}</label>
  <progress {id} max={total}></progress>
    
  <button class="feedback">Give Feedback</button>
  <Feedback id={id} />

  {
    import.meta.env.DEV && (
      <button class="reset">
        <b>RESET</b>
      </button>
    )
  }
</x-progress>

<style>
  x-progress {
    display: flex;
    flex-direction: column;
    align-items: center;
    margin-top: 2rem;
    margin-bottom: -1rem;
  }
  progress {
    margin: 0 !important;
  }
  button {
    background-color: var(--sl-color-accent-low);
    border-radius: 0.25rem;
    padding: 0.25rem 0.5rem;
    cursor: pointer;

    border: 1px;
    border-radius: 0.25em;

    transition: opacity 0.2s;
  }
  button:hover {
    opacity: 0.8;
  }
  .reset {
    background-color: red;
  }
</style>

<script>
  import { subscribe, add, remove } from "./Checkpoint/checkpoint";
  import { confetti } from "../utils/confetti";

  class Progress extends HTMLElement {
    constructor() {
      super();

      const progress = this.querySelector("progress") as HTMLProgressElement;
      const label = this.querySelector("label") as HTMLLabelElement;
      const launchConfetti: boolean = this.dataset.confetti === "true";
      const id: string = progress.id;
      const total: number = progress.max;

      subscribe(id, async (checkpoint) => {
        const value = checkpoint.size < total ? checkpoint.size : total;
        label.innerText = `${value} / ${total}`;
        progress.value = value;
        const confettiId = `${id}-confetti`;
        if (!launchConfetti || value !== total || checkpoint.has(confettiId)) {
          return;
        }

        confetti();
        add(confettiId);
      });

      const feedback = this.querySelector("dialog")!;
      this.querySelector(".feedback")!.addEventListener("click", () =>
        feedback.showModal(),
      );

      if (import.meta.env.DEV) {
        this.querySelector(".reset")!.addEventListener("click", () => {
          remove(id);
          location.reload();
        });
      }
    }
  }

  customElements.define("x-progress", Progress);
</script>
