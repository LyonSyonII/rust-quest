---
import { Image } from "astro:assets"
import Robot from "@assets/robot.svg"
import CodeBlock from "@components/CodeBlock/CodeBlock.astro"
import QuestionCard from "@components/QuestionCard.astro"
import type { RobotGameProps } from "./RobotGameTypes"

type Props = {
  id: string
  question?: string
  code?: string
  cellSize?: string
}

const { id, question = "", code = "", cellSize = "3rem" } = Astro.props

const {
  rows: rowsDef = 3,
  cols: colsDef = 3,
  boards,
  solveWithMinimumSteps,
}: RobotGameProps = (await import(`../../validation/${id}.ts`)).default

const slimes = (
  await Astro.glob<Record<string, ImageMetadata>>(
    "/src/assets/monsters/slime/*",
  )
).map((v) => v.default!)
const getRandomSlime = () => slimes[Math.floor(Math.random() * slimes.length)]!
---

<QuestionCard question={question} gap="0">
  <x-robot-game id={id}>
    <div id="boards">
      {
        boards.map(
          ({ rows = rowsDef, cols = colsDef, start, enemies, steps }, i) => (
            <div id="board">
              <table class="not-content" id={`${id}-${i}`}>
                {[...Array(cols)].map((_, i) => (
                  <tr class="not-content">
                    {[...Array(rows)].map((_, j) => (
                      <td class="not-content">
                        {(start == i * colsDef + j && (
                          <Image src={Robot} alt="robot" id="robot"/>
                        )) ||
                          (enemies.includes(i * colsDef + j) && (
                            <Image
                              src={getRandomSlime()}
                              alt="slime"
                              id="slime"
                            />
                          )) || <p>{i * colsDef + j}</p>}
                      </td>
                    ))}
                  </tr>
                ))}
              </table>
              {solveWithMinimumSteps && (
                <label for={`${id}-${i}`}>Minimum Steps: {steps}</label>
              )}
            </div>
          ),
        )
      }
    </div>
    {
      solveWithMinimumSteps && (
        <b id="min-steps">Solve with the minimum steps possible</b>
      )
    }
    <CodeBlock id={id} code={code} />
  </x-robot-game>
</QuestionCard>

<style define:vars={{ cellSize }}>
  :root {
  }
  x-robot-game {
  }
  #boards {
    display: flex;
    justify-content: space-around;
    align-items: center;
    flex-wrap: wrap;
    margin-top: 0rem;
    margin-bottom: 0.5rem;
  }
  #board {
    margin-top: 0;
    display: flex;
    flex-direction: column;
    align-items: center;
  }
  #board table {
    table-layout: fixed;
    width: fit-content;
    margin-left: auto;
    margin-right: auto;
    margin-bottom: 0rem;
    margin-top: 0;
    border-collapse: collapse;
    transition: opacity 0.2s ease-in-out;
  }
  tr {
    background-color: var(--sl-color-black);
  }
  td {
    width: var(--cellSize);
    height: var(--cellSize);
    padding: 0;
    text-align: center;
    vertical-align: middle;
    border: 1px solid var(--sl-color-hairline-light);
  }
  td > p {
    opacity: 0.75;
    font-weight: bold;
    color: var(--sl-color-text);
  }
  #board img {
    display: block;
    width: 80%;
    height: auto;
    
    margin-left: auto;
    margin-right: auto;
  }
  #board > label {
    font-size: 0.8rem;
    text-align: center;
    margin-top: 0;
  }
  #min-steps {
    font-size: 0.8rem;
    margin-top: 0;
    /*  justify-self: flex-start; */
  }
  #robot {
    transition: transform 0.35s ease-out;
  }
  .up {
    transform: translateY(calc(-1 * var(--cellSize)));
  }
  .down {
    transform: translateY(var(--cellSize));
  }
  .right {
    transform: translateX(var(--cellSize));
  }
  .left {
    transform: translateX(calc(-1 * var(--cellSize)));
  }
</style>

<script>
  import { RobotGame } from "./RobotGame";
  customElements.define("x-robot-game", RobotGame);
</script>
