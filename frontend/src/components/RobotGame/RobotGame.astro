---
type Props = {
  rows: number;
  cols: number;
  start: number;
  enemies: number[];
  id: number;
  winText: string;
  loseText: string;
};
const { rows, cols, start = 0, enemies = [], id, winText = "You win!", loseText = "There are some Slimes left, try again!" } = Astro.props;

import { Image } from "astro:assets";
import CodeBlock from "@components/CodeBlock/CodeBlock.astro";
import Robot from "@assets/robot.svg";

const slimes = (
  await Astro.glob<Record<string, ImageMetadata>>(
    "/src/assets/monsters/slime/*",
  )
).map((v) => v.default!);
const getRandomSlime = () => slimes[Math.floor(Math.random() * slimes.length)]!;

const robotSize = 70;
const slimeWidth = 70;
const setup = `
  fn up() { println!("UP") }
  fn down() { println!("DOWN") }
  fn left() { println!("LEFT") }
  fn right() { println!("RIGHT") }
  __VALUE__
`;
---

<x-robot-game rows={rows} cols={cols} start={start} enemies={enemies} id={id} win={winText} lose={loseText} >
  <table>
    {
      [...Array(rows)].map((_, i) => (
        <tr>
          {[...Array(cols)].map((_, j) => (
            <td>
              {
                start == (i * cols + j) && <Image src={Robot} width={robotSize} alt="robot" id="robot" />
                || enemies.includes(i * cols + j) && <Image src={getRandomSlime()} width={slimeWidth} alt="slime" id="slime" />
                || <p>{i * cols + j}</p>
              }
            </td>
          ))}
        </tr>
      ))
    }
  </table>
  <CodeBlock id={id} setup={setup} />
</x-robot-game>

<style>
  :root {
    --cellSize: 5rem;
  }
  table {
    table-layout: fixed;
    width: fit-content;
    margin-left: auto;
    margin-right: auto;
    transition: opacity 0.2s ease-in-out;
  }
  tr {
    background-color: white !important;
  }
  td {
    width: var(--cellSize);
    height: var(--cellSize);
    text-align: center;
  }
  td > :global(p) {
    opacity: 0.5;
    font-weight: bold;
  }
  #robot {
    transition: transform 0.35s ease-out;
  }
  .up {
    transform: translateY(-5rem);
  }
  .down {
    transform: translateY(5rem);
  }
  .right {
    transform: translateX(5rem);
  }
  .left {
    transform: translateX(-5rem);
  }
</style>

<script>
  import { confetti } from "src/utils/confetti";

  function wait(ms: number): Promise<void> {
    return new Promise((resolve) => setTimeout(resolve, ms));
  }

  class RobotGame extends HTMLElement {
    readonly codeblock: CodeBlock;
    readonly startingBoard: HTMLTableElement;
    readonly startPos: number;
    readonly rows: number;
    readonly cols: number;
    readonly enemies: number;
    readonly winText: string;
    readonly loseText: string;
    
    tableChanged: boolean;
    robot: HTMLImageElement;
    
    constructor() {
      super();

      this.codeblock = this.querySelector<CodeBlock>("x-code-block")!;
      this.startingBoard = this.querySelector("table")!.cloneNode(true) as HTMLTableElement;
        
        this.startPos = +this.getAttribute("start")!;
        this.rows = +this.getAttribute("rows")!;
        this.cols = +this.getAttribute("cols")!;
        this.enemies = this.querySelectorAll("#slime").length;

        this.winText = this.getAttribute("win")!;
        this.loseText = this.getAttribute("lose")!;

        this.tableChanged = false;

      this.robot = this.querySelector("#robot")!;
    }
    
    async resetBoard() {
      if (!this.tableChanged) {
        return;
      }
      this.tableChanged = false;
      this.querySelector("table")!.style.opacity = "0";
      wait(200);
      this.startingBoard.style.opacity = "0";
      this.querySelector("table")!.replaceWith(this.startingBoard.cloneNode(true));
      wait(10);
      this.querySelector("table")!.style.opacity = "1";
      this.robot = this.querySelector("#robot")!;
      wait(200);
    }
    
    connectedCallback() {
        this.codeblock.addEventListener("reset", (e) => { 
          this.resetBoard();
          e.codeBlock.hideOutput();
        });
        this.codeblock.addEventListener("response", async (e) => {
        e.preventDefault();
        await this.resetBoard();
        
        const cells = this.querySelectorAll("td");
        let killedEnemies = 0;
        let currentPos = this.startPos;

        const setPos = async (newPos: number, direction: string) => {
          this.tableChanged = true;
          this.robot.classList.add(direction);
          await wait(350);
          this.robot.classList.remove(direction);
          ({currentPos, killedEnemies} = this.setPos(currentPos, newPos, cells, killedEnemies));
        };

        for (const c of e.response.split("\n")) {
          switch (c) {
            case "UP": {
              const newPos = currentPos - this.cols;
              if (newPos >= 0) {
                await setPos(newPos, "up");
              }
              break;
            }
            case "DOWN": {
              const newPos = currentPos + this.cols;
              if (newPos <= cells.length) {
                await setPos(newPos, "down");
              }
              break;
            }
            case "LEFT": {
              const newPos = currentPos - 1;
              if (currentPos % this.cols !== 0 && newPos >= 0) {
                await setPos(newPos, "left");
              }
              break;
            }
            case "RIGHT": {
              const newPos = currentPos + 1;
              if (newPos % this.cols !== 0 && newPos <= cells.length) {
                await setPos(newPos, "right");
              }
              break;
            }

            default: continue;
          }

          await wait(150);
        }
        
        if (killedEnemies === this.enemies) {
          this.codeblock.setOutput(this.winText);
          confetti({count: 20});
        } else {
          this.codeblock.setOutput(this.loseText);
          await wait(1000);
          this.resetBoard();
        }
        this.codeblock.setRunning(false);
      });
    }

    setPos(currentPos: number, newPos: number, cells: NodeListOf<HTMLTableCellElement>, killedEnemies: number): { currentPos: number, killedEnemies: number } {
      const currentCell = cells[currentPos]!;
      const newCell = cells[newPos]!;
      
      const child = newCell.firstElementChild!;
      if (child.id === "slime") {
        killedEnemies += 1;
      }
      
      child.replaceWith(this.robot);
      
      const newP = document.createElement("p");
      newP.textContent = currentPos.toString();
      currentCell.appendChild(newP);
      
      return { currentPos: newPos, killedEnemies };
    }
  }
  customElements.define("x-robot-game", RobotGame);
</script>
